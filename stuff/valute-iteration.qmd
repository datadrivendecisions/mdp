---
title: "value-iteration"
author: "Witek ten HOve"
format: html
editor: visual
jupyter: python3
---

## Setup

```{python}
import numpy as np
from scipy.stats import poisson
import matplotlib.pyplot as plt
import seaborn as sns
```

## Model

```{python}
# Parameters and helper functions

X_max = 8  # max system capacity
d = [0, 2, 5]  # cost for using server rate
K = 3  # cost for changing the service rate
R = 5  # reward for processing 1 job per period
H = 2 # holding cost per period

# Sets of states (X: number of jobs in the system, B: chosen server rate)
X = range(X_max + 1)
B = [0, 1, 2]

# Create states
S = [[b for b in B] for x in X]

for x, s in enumerate(S):
    print(f'State {x}, {s}')

# Service rate probabilities
f_b = [[0.8, 0.2],[0.5, 0.5],[0.2, 0.8]]
b_1, n_0 = [1, 0] 
print(f_b[b_1][n_0-1]) # Expect 0.5
b_1, n_0 = [0, 2] 
print(f_b[b_1][n_0-1]) # Expect 0.2
exp_b = [np.dot(f_b[b], np.array([1,2]).T) for b in B]
print(exp_b[0], exp_b[1], exp_b[2])

# probability g(n) of n new jobs arriving
def g(n):
    return poisson.pmf(n, mu=1.5)

# probability of n or more new jobs arriving
def g_or_more(n):
    return 1 - sum(g(m) for m in range(n))
```

```{python}
# Create functions

# Transition probabilities
def P(s_i, s_j, f_b, a):
    x_i, b_i = s_i
    x_j, b_j = s_j
    if b_j != a:
        return 0.0
    if x_i <= 1:
        if x_j < X_max:
            return g(x_j) # Arrival rate
        elif x_j == X_max:
            return g_or_more(x_j) # 1 - probability of 0, 1, 2, 3, 4, 5, 6, 7 arrivals
        else:
            return 0.0 # X_j > X_max, not possible
    elif x_i <= X_max:
        if x_j < X_max:
            return sum(f_b[b_j][n-1] * g(x_j - x_i + n) for n in [1, 2]) # Arrivals have to compensate for the difference in states and processed jobs
        elif x_j == X_max:
            return sum(f_b[b_j][n-1] * g_or_more(x_j - x_i + n) for n in [1, 2]) # Arrivals have to compensate for the difference in states and processed jobs
        else:
            return 0.0 # x_j > X_max, not possible
    else:
        return 0.0 # X_i > X_max, not possible

# Expected cost function
# Define the expected reward R_{(s,b),a} when state is (s,b) and chosen service rate is a
def r(x, b, a, f_b, R, H, K, d):
    if x == 0:
        return d[a] + K*(b != a) # no costs for processing and holding jobs
    elif x == 1:
        return  - R + h(1, H) + d[a] + K*(b != a) # reward and cost for processing and holding 1 job
    else:
        return - R * sum(f_b[a][n-1] * n for n in [1, 2]) + H*x + d[a] + K*(b != a)

# Test reward function
test_cases = [
  [[0, 0], [0, 1], 1],
  [[3, 1], [5, 1], 1],
  [[3, 1], [5, 1], 0],
  [[8, 2], [5, 1], 1],
  [[8, 2], [5, 1], 2],
  [[8, 2], [5, 1], 0],
  [[8, 2], [6, 2], 2],
  [[5, 0], [8, 1], 1],
  [[5, 0], [8, 2], 2]
  ]
  
for s_i, s_j, a in test_cases:
 print(f'For state {s_i} the probability of ending in stat {s_j} after action {a} is {P(s_i, s_j, f_b, a)} and the cost is {r(s_i[0], s_i[1], a, f_b, R, H, K, d)}')

```
